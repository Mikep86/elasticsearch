setup:
  - skip:
      version: " - 8.14.99"
      reason: semantic_text introduced in 8.15.0

  - do:
      inference.put_model:
        task_type: sparse_embedding
        inference_id: sparse-inference-id
        body: >
          {
            "service": "test_service",
            "service_settings": {
              "model": "my_model",
              "api_key": "abc64"
            },
            "task_settings": {
            }
          }

  - do:
      inference.put_model:
        task_type: text_embedding
        inference_id: dense-inference-id
        body: >
          {
            "service": "text_embedding_test_service",
            "service_settings": {
              "model": "my_model",
              "dimensions": 10,
              "api_key": "abc64",
              "similarity": "cosine"
            },
            "task_settings": {
            }
          }

  - do:
      indices.create:
        index: test-sparse-index
        body:
          mappings:
            properties:
              inference_field:
                type: semantic_text
                inference_id: sparse-inference-id
              non_inference_field:
                type: text

  - do:
      indices.create:
        index: test-dense-index
        body:
          mappings:
            properties:
              inference_field:
                type: semantic_text
                inference_id: dense-inference-id
              non_inference_field:
                type: text

---
"Query using a sparse embedding model":
  - skip:
      features: [ "headers" ]

  - do:
      index:
        index: test-sparse-index
        id: doc_1
        body:
          inference_field: "inference test"
          non_inference_field: "non inference test"
        refresh: true

  - do:
      headers:
        # Force JSON content type so that we use a parser that interprets the floating-point score as a double
        Content-Type: application/json
      search:
        index: test-sparse-index
        body:
          query:
            semantic:
              field: "inference_field"
              query: "inference test"

  - match: { hits.total.value: 1 }
  - match: { hits.hits.0._id: "doc_1" }
  - match: { hits.hits.0._score: 55.0 }

---
"Query using a dense embedding model":
  - skip:
      features: [ "headers", "close_to" ]

  - do:
      index:
        index: test-dense-index
        id: doc_1
        body:
          inference_field: "inference test"
          non_inference_field: "non inference test"
        refresh: true

  - do:
      headers:
        # Force JSON content type so that we use a parser that interprets the floating-point score as a double
        Content-Type: application/json
      search:
        index: test-dense-index
        body:
          query:
            semantic:
              field: "inference_field"
              query: "inference test"

  - match: { hits.total.value: 1 }
  - match: { hits.hits.0._id: "doc_1" }
  - close_to: { hits.hits.0._score: { value: 0.6616, error: 0.0001 } }

---
"Apply boost and query name":
  - skip:
      features: [ "headers" ]

  - do:
      index:
        index: test-sparse-index
        id: doc_1
        body:
          inference_field: "inference test"
          non_inference_field: "non inference test"
        refresh: true

  - do:
      headers:
        # Force JSON content type so that we use a parser that interprets the floating-point score as a double
        Content-Type: application/json
      search:
        index: test-sparse-index
        body:
          query:
            semantic:
              field: "inference_field"
              query: "inference test"
              boost: 100.0
              _name: i-like-naming-my-queries

  - match: { hits.total.value: 1 }
  - match: { hits.hits.0._id: "doc_1" }
  - match: { hits.hits.0._score: 5500.0 }
  - match: { hits.hits.0.matched_queries: ["i-like-naming-my-queries"] }

---
"Query an index alias":
  - skip:
      features: [ "headers" ]

  - do:
      index:
        index: test-sparse-index
        id: doc_1
        body:
          inference_field: "inference test"
          non_inference_field: "non inference test"
        refresh: true

  - do:
      indices.put_alias:
        index: test-sparse-index
        name: my-alias

  - do:
      headers:
        # Force JSON content type so that we use a parser that interprets the floating-point score as a double
        Content-Type: application/json
      search:
        index: my-alias
        body:
          query:
            semantic:
              field: "inference_field"
              query: "inference test"

  - match: { hits.total.value: 1 }
  - match: { hits.hits.0._id: "doc_1" }
  - match: { hits.hits.0._score: 55.0 }

---
"Query the wrong field type":
  - do:
      index:
        index: test-sparse-index
        id: doc_1
        body:
          inference_field: "inference test"
          non_inference_field: "non inference test"
        refresh: true

  - do:
      catch: bad_request
      search:
        index: test-sparse-index
        body:
          query:
            semantic:
              field: "non_inference_field"
              query: "inference test"

  - match: { error.type: "search_phase_execution_exception" }
  - match: { error.root_cause.0.type: "illegal_argument_exception" }
  - match: { error.root_cause.0.reason: "Field [non_inference_field] of type [text] does not support semantic queries" }

---
"Query a missing field":
  - do:
      index:
        index: test-sparse-index
        id: doc_1
        body:
          inference_field: "inference test"
          non_inference_field: "non inference test"
        refresh: true

  - do:
      search:
        index: test-sparse-index
        body:
          query:
            semantic:
              field: "missing_field"
              query: "inference test"

  - match: { hits.total.value: 0 }

---
"Query a missing index":
  - do:
      catch: missing
      search:
        index: missing-index
        body:
          query:
            semantic:
              field: "inference_field"
              query: "inference test"

  - match: { error.type: "index_not_found_exception" }
  - match: { error.reason: "no such index [missing-index]" }

  - do:
      search:
        index: missing-index
        ignore_unavailable: true
        body:
          query:
            semantic:
              field: "inference_field"
              query: "inference test"

  - match: { hits.total.value: 0 }

---
"Query multiple indices":
  - do:
      catch: bad_request
      search:
        index:
          - test-sparse-index
          - test-dense-index
        body:
          query:
            semantic:
              field: "inference_field"
              query: "inference test"

  - match: { error.type: "illegal_argument_exception" }
  - match: { error.reason: "Field [inference_field] has multiple inference IDs associated with it" }

  # Test wildcard resolution
  - do:
      catch: bad_request
      search:
        index: test-*
        body:
          query:
            semantic:
              field: "inference_field"
              query: "inference test"

  - match: { error.type: "illegal_argument_exception" }
  - match: { error.reason: "Field [inference_field] has multiple inference IDs associated with it" }

  # Test querying an index alias that resolves to multiple indices
  - do:
      indices.put_alias:
        index:
          - test-sparse-index
          - test-dense-index
        name: my-alias

  - do:
      catch: bad_request
      search:
        index: my-alias
        body:
          query:
            semantic:
              field: "inference_field"
              query: "inference test"

  - match: { error.type: "illegal_argument_exception" }
  - match: { error.reason: "Field [inference_field] has multiple inference IDs associated with it" }

---
"Query a field that has no indexed inference results":
  - skip:
      features: [ "headers" ]

  - do:
      headers:
        # Force JSON content type so that we use a parser that interprets the floating-point score as a double
        Content-Type: application/json
      search:
        index: test-sparse-index
        body:
          query:
            semantic:
              field: "inference_field"
              query: "inference test"

  - match: { hits.total.value: 0 }

  - do:
      headers:
        # Force JSON content type so that we use a parser that interprets the floating-point score as a double
        Content-Type: application/json
      search:
        index: test-dense-index
        body:
          query:
            semantic:
              field: "inference_field"
              query: "inference test"

  - match: { hits.total.value: 0 }
